version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1.5

jobs:
  build-and-push-service1:
    environment:
      AWS_REGION: eu-west-1
    docker:
      - image: cimg/aws:2022.06
    steps:
      - checkout
      - aws-cli/setup:
          role-arn: "arn:aws:iam::715815605776:role/CI_Role"
          aws-region: AWS_REGION
          # optional parameters
          role-session-name: "example-session"
          session-duration: "1800"
      - setup_remote_docker
      - run:
          name: Build and push service1
          working_directory: ./dotnet-services/Service1
          command: |
            docker build . --tag service1:${CIRCLE_SHA1}
            docker tag service1:${CIRCLE_SHA1} 715815605776.dkr.ecr.eu-west-1.amazonaws.com/service1:${CIRCLE_SHA1}
            aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin 715815605776.dkr.ecr.eu-west-1.amazonaws.com
            docker push 715815605776.dkr.ecr.eu-west-1.amazonaws.com/service1:${CIRCLE_SHA1}
  build-and-push-service2:
    environment:
      AWS_REGION: eu-west-1
    docker:
      - image: cimg/aws:2022.06
    steps:
      - checkout
      - aws-cli/setup:
          role-arn: "arn:aws:iam::715815605776:role/CI_Role"
          aws-region: AWS_REGION
          # optional parameters
          role-session-name: "example-session"
          session-duration: "1800"
      - setup_remote_docker
      - run:
          name: Build and push service2
          working_directory: ./dotnet-services/Service2
          command: |
            docker build . --tag service2:${CIRCLE_SHA1}
            docker tag service2:${CIRCLE_SHA1} 715815605776.dkr.ecr.eu-west-1.amazonaws.com/service2:${CIRCLE_SHA1}
            aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin 715815605776.dkr.ecr.eu-west-1.amazonaws.com
            docker push 715815605776.dkr.ecr.eu-west-1.amazonaws.com/service2:${CIRCLE_SHA1}
  create-basic-infrastructure:
    environment:
      ENVIRONMENT_NAME: dev
    docker:
      - image: cimg/node:18.15.0
    steps:
      - checkout
      - aws-cli/setup:
          role-arn: "arn:aws:iam::715815605776:role/CI_Role"
          aws-region: AWS_REGION
          # optional parameters
          role-session-name: "example-session"
          session-duration: "1800"
      - setup_remote_docker
      - run:
          name: Deploy basic infrastructure
          working_directory: ./infrastructure
          command: |
            npm install
            npm run build
            npm run deploy-basics
  deploy-dev-service1:
    environment:
      ENVIRONMENT_NAME: dev
    docker:
      - image: cimg/aws:2022.06
    steps:
      - checkout
      - aws-cli/setup:
          role-arn: "arn:aws:iam::715815605776:role/CI_Role"
          aws-region: AWS_REGION
          # optional parameters
          role-session-name: "example-session"
          session-duration: "1800"
      - setup_remote_docker
      - run:
          name: Deploy service1
          working_directory: ./infrastructure
          no_output_timeout: 60m
          command: |
            npm install
            npm run build
            npm run deploy-service1 -- --parameters buildNumber=${CIRCLE_SHA1}
  deploy-dev-service2:
    environment:
      ENVIRONMENT_NAME: dev
    docker:
      - image: cimg/aws:2022.06
    steps:
      - checkout
      - aws-cli/setup:
          role-arn: "arn:aws:iam::715815605776:role/CI_Role"
          aws-region: AWS_REGION
          # optional parameters
          role-session-name: "example-session"
          session-duration: "1800"
      - setup_remote_docker
      - run:
          name: Deploy service2
          working_directory: ./infrastructure
          no_output_timeout: 60m
          command: |
            npm install
            npm run build
            npm run deploy-service2 -- --parameters buildNumber=${CIRCLE_SHA1}
workflows:
  aws-infrastructure-example:
    jobs:
      - create-basic-infrastructure:
          context: aws
      - build-and-push-service1:
          context: aws
          requires:
            - create-basic-infrastructure
      - build-and-push-service2:
          context: aws
          requires:
            - create-basic-infrastructure
      - approve-deply-service1:
          type: approval
          requires:
            - build-and-push-service1
            - build-and-push-service2
      - deploy-dev-service1:
          context: aws
          requires:
            - approve-deply-service1
      - deploy-dev-service2:
          context: aws
          requires:
            - deploy-dev-service1
